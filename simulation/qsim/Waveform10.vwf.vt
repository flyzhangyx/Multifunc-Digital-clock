// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/09/2018 15:56:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    switchlll
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module switchlll_vlg_sample_tst(
	clk_500hz,
	key_in,
	sampler_tx
);
input  clk_500hz;
input  key_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk_500hz or key_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module switchlll_vlg_check_tst (
	key_out,
	sampler_rx
);
input  key_out;
input sampler_rx;

reg  key_out_expected;

reg  key_out_prev;

reg  key_out_expected_prev;

reg  last_key_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	key_out_prev = key_out;
end

// update expected /o prevs

always @(trigger)
begin
	key_out_expected_prev = key_out_expected;
end



// expected key_out
initial
begin
	key_out_expected = 1'bX;
end 
// generate trigger
always @(key_out_expected or key_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected key_out = %b | ",key_out_expected_prev);
	$display("| real key_out = %b | ",key_out_prev);
`endif
	if (
		( key_out_expected_prev !== 1'bx ) && ( key_out_prev !== key_out_expected_prev )
		&& ((key_out_expected_prev !== last_key_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port key_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", key_out_expected_prev);
		$display ("     Real value = %b", key_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_key_out_exp = key_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module switchlll_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_500hz;
reg key_in;
// wires                                               
wire key_out;

wire sampler;                             

// assign statements (if any)                          
switchlll i1 (
// port map - connection between master ports and signals/registers   
	.clk_500hz(clk_500hz),
	.key_in(key_in),
	.key_out(key_out)
);

// clk_500hz
always
begin
	clk_500hz = 1'b0;
	clk_500hz = #2000 1'b1;
	#2000;
end 

// key_in
initial
begin
	key_in = 1'b0;
	key_in = #226 1'b1;
	# 2866;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #3800 1'b1;
		# 2866;
	end
	key_in = 1'b0;
	key_in = #3576 1'b1;
	key_in = #2060 1'b0;
	key_in = #2450 1'b1;
	key_in = #2550 1'b0;
	key_in = #2450 1'b1;
	key_in = #3027 1'b0;
	key_in = #6600 1'b1;
	key_in = #863 1'b0;
	key_in = #993 1'b1;
	key_in = #4500 1'b0;
	key_in = #4507 1'b1;
	# 1690;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #3933 1'b1;
		# 2733;
	end
	key_in = 1'b0;
	key_in = #3933 1'b1;
	key_in = #1045 1'b0;
	key_in = #1220 1'b1;
	key_in = #1600 1'b0;
	key_in = #3400 1'b1;
	key_in = #1600 1'b0;
	key_in = #4722 1'b1;
	key_in = #4200 1'b0;
	key_in = #9306 1'b1;
	key_in = #3000 1'b0;
	key_in = #7000 1'b1;
	key_in = #3000 1'b0;
	key_in = #952 1'b1;
	key_in = #657 1'b0;
	key_in = #4400 1'b1;
	key_in = #5600 1'b0;
	key_in = #4400 1'b1;
	key_in = #4943 1'b0;
	key_in = #3196 1'b1;
	key_in = #5800 1'b0;
	key_in = #4200 1'b1;
	key_in = #5800 1'b0;
	key_in = #3897 1'b1;
	key_in = #4700 1'b0;
	key_in = #5300 1'b1;
	key_in = #4700 1'b0;
	key_in = #5559 1'b1;
	key_in = #5600 1'b0;
	key_in = #4400 1'b1;
	key_in = #5600 1'b0;
	key_in = #1248 1'b1;
	# 825;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #2300 1'b1;
		# 1033;
	end
	key_in = 1'b0;
	key_in = #2300 1'b1;
	key_in = #1179 1'b0;
	key_in = #1834 1'b1;
	key_in = #1499 1'b0;
	key_in = #1834 1'b1;
	key_in = #1499 1'b0;
	key_in = #1834 1'b1;
	key_in = #2556 1'b0;
	key_in = #5100 1'b1;
	key_in = #4900 1'b0;
	key_in = #5100 1'b1;
	key_in = #2874 1'b0;
	key_in = #561 1'b1;
	# 1666;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #1667 1'b1;
		# 1666;
	end
	key_in = 1'b0;
	key_in = #1107 1'b1;
	key_in = #9025 1'b0;
	key_in = #8200 1'b1;
	key_in = #2775 1'b0;
	key_in = #108 1'b1;
	key_in = #2000 1'b0;
	key_in = #3000 1'b1;
	key_in = #2000 1'b0;
	key_in = #2892 1'b1;
	key_in = #4466 1'b0;
	key_in = #10400 1'b1;
	key_in = #5134 1'b0;
	key_in = #1426 1'b1;
	key_in = #5700 1'b0;
	key_in = #4300 1'b1;
	key_in = #5700 1'b0;
	key_in = #2874 1'b1;
	key_in = #2198 1'b0;
	key_in = #6000 1'b1;
	key_in = #4000 1'b0;
	key_in = #6000 1'b1;
	key_in = #1802 1'b0;
	key_in = #12462 1'b1;
	key_in = #6000 1'b0;
	key_in = #1729 1'b1;
	key_in = #3500 1'b0;
	key_in = #8482 1'b1;
	key_in = #4200 1'b0;
	key_in = #5800 1'b1;
	key_in = #4200 1'b0;
	key_in = #4957 1'b1;
	key_in = #2350 1'b0;
	key_in = #2650 1'b1;
	key_in = #2350 1'b0;
	key_in = #2221 1'b1;
	# 2999;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #3667 1'b1;
		# 2999;
	end
	key_in = 1'b0;
	key_in = #3721 1'b1;
	# 1566;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #1767 1'b1;
		# 1566;
	end
	key_in = 1'b0;
	key_in = #815 1'b1;
	key_in = #1117 1'b0;
	key_in = #5800 1'b1;
	key_in = #3083 1'b0;
	key_in = #2137 1'b1;
	# 2399;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #4267 1'b1;
		# 2399;
	end
	key_in = 1'b0;
	key_in = #2132 1'b1;
	key_in = #1489 1'b0;
	key_in = #2600 1'b1;
	key_in = #2400 1'b0;
	key_in = #2600 1'b1;
	key_in = #911 1'b0;
	key_in = #219 1'b1;
	# 2199;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #4467 1'b1;
		# 2199;
	end
	key_in = 1'b0;
	key_in = #4616 1'b1;
	# 2266;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #4400 1'b1;
		# 2266;
	end
	key_in = 1'b0;
	key_in = #6355 1'b1;
	# 3133;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #3533 1'b1;
		# 3133;
	end
	key_in = 1'b0;
	key_in = #1216 1'b1;
	key_in = #5884 1'b0;
	key_in = #13600 1'b1;
	key_in = #931 1'b0;
	key_in = #4900 1'b1;
	key_in = #4685 1'b0;
	key_in = #1151 1'b1;
	# 2999;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #3667 1'b1;
		# 2999;
	end
	key_in = 1'b0;
	key_in = #2518 1'b1;
	key_in = #6932 1'b0;
	key_in = #10400 1'b1;
	key_in = #2668 1'b0;
	key_in = #3800 1'b1;
	key_in = #4200 1'b0;
	key_in = #5800 1'b1;
	key_in = #4200 1'b0;
	key_in = #2750 1'b1;
	key_in = #4100 1'b0;
	key_in = #6389 1'b1;
	# 1566;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #1767 1'b1;
		# 1566;
	end
	key_in = 1'b0;
	key_in = #1600 1'b1;
	# 1199;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #2134 1'b1;
		# 1199;
	end
	key_in = 1'b0;
	key_in = #1064 1'b1;
	key_in = #244 1'b0;
	key_in = #5500 1'b1;
	key_in = #4275 1'b0;
	key_in = #3733 1'b1;
	key_in = #2933 1'b0;
	key_in = #3733 1'b1;
	key_in = #2933 1'b0;
	key_in = #3733 1'b1;
	key_in = #2916 1'b0;
	key_in = #457 1'b1;
	key_in = #8200 1'b0;
	key_in = #11343 1'b1;
	key_in = #1683 1'b0;
	key_in = #4900 1'b1;
	key_in = #3417 1'b0;
	key_in = #2476 1'b1;
	key_in = #1950 1'b0;
	key_in = #3050 1'b1;
	key_in = #1950 1'b0;
	key_in = #1122 1'b1;
	# 1933;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #1400 1'b1;
		# 1933;
	end
	key_in = 1'b0;
	key_in = #2890 1'b1;
	# 3466;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #3200 1'b1;
		# 3466;
	end
	key_in = 1'b0;
	key_in = #1165 1'b1;
	key_in = #791 1'b0;
	key_in = #6600 1'b1;
	key_in = #3012 1'b0;
	key_in = #2667 1'b1;
	key_in = #3999 1'b0;
	key_in = #2667 1'b1;
	key_in = #3999 1'b0;
	key_in = #2667 1'b1;
	key_in = #5471 1'b0;
	key_in = #4067 1'b1;
	key_in = #2599 1'b0;
	key_in = #4067 1'b1;
	key_in = #2599 1'b0;
	key_in = #4067 1'b1;
	key_in = #1239 1'b0;
	key_in = #2067 1'b1;
	key_in = #1266 1'b0;
	key_in = #2067 1'b1;
	key_in = #1266 1'b0;
	key_in = #2067 1'b1;
	key_in = #756 1'b0;
	key_in = #1057 1'b1;
	key_in = #4300 1'b0;
	key_in = #5700 1'b1;
	key_in = #4300 1'b0;
	key_in = #5700 1'b1;
	key_in = #6800 1'b0;
	key_in = #12400 1'b1;
	key_in = #4700 1'b0;
	key_in = #5043 1'b1;
	key_in = #2772 1'b0;
	key_in = #6400 1'b1;
	key_in = #3600 1'b0;
	key_in = #6400 1'b1;
	key_in = #828 1'b0;
	key_in = #1775 1'b1;
	key_in = #1850 1'b0;
	key_in = #3150 1'b1;
	key_in = #1850 1'b0;
	key_in = #1375 1'b1;
	key_in = #1011 1'b0;
	key_in = #6000 1'b1;
	key_in = #4000 1'b0;
	key_in = #6000 1'b1;
	key_in = #2989 1'b0;
	key_in = #677 1'b1;
	key_in = #2400 1'b0;
	key_in = #2600 1'b1;
	key_in = #2400 1'b0;
	key_in = #2307 1'b1;
	key_in = #5900 1'b0;
	key_in = #4100 1'b1;
	key_in = #5900 1'b0;
	key_in = #3716 1'b1;
	key_in = #490 1'b0;
	key_in = #6000 1'b1;
	key_in = #4009 1'b0;
	key_in = #14000 1'b1;
	key_in = #5501 1'b0;
	key_in = #1245 1'b1;
	# 3333;
	repeat(2)
	begin
		key_in = 1'b0;
		key_in = #3333 1'b1;
		# 3333;
	end
	key_in = 1'b0;
	key_in = #4688 1'b1;
	key_in = #4200 1'b0;
	key_in = #3202 1'b1;
	key_in = #2674 1'b0;
	key_in = #5200 1'b1;
end 

switchlll_vlg_sample_tst tb_sample (
	.clk_500hz(clk_500hz),
	.key_in(key_in),
	.sampler_tx(sampler)
);

switchlll_vlg_check_tst tb_out(
	.key_out(key_out),
	.sampler_rx(sampler)
);
endmodule

